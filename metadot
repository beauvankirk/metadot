#!/bin/bash
#
# Metadot: a dotfile management system.
#
# Copyright (C) 2013 Silvio Rhatto - rhatto at riseup.net
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Set real home folder
if [ ! -z "$PREFIX" ]; then
  if [ ! -d "$PREFIX" ]; then
    echo "Destination folder not found: $PREFIX"
  else
    DEST="$PREFIX"
  fi
else
  DEST="$HOME"
fi

# Parameters
OPT="$1"
DATE="`date +%Y%m%d%I%M%S`"
BASENAME="`basename $0`"
DIRNAME="`dirname $0`"
DOT="$DEST/.dotfiles"
MODULES="$DOT/modules"
BACKUPS="$DEST/.backups/$DATE"
DEFAULT="https://git.fluxo.info/rhatto/dotfiles"

# Backup a file
function metadot_backup {
  local file="$DEST/$1"
  
  if [ -e "$file" ] || [ -h "$file" ]; then
    local folder="$BACKUPS/`dirname $1`"

    #echo "Backing up `basename $1`..."
    mkdir -p $folder
    mv $file $folder
  fi
}

# Find contents of a module
function metadot_find {
  local module="$1"
  ( cd $MODULES/$module && find -name '*.link' -or -name '*.dot.link' ) | grep -v '.git/modules' | sed -e 's|./||'
}

# Load a module
function metadot_load {
  local module="$1"
  local destname
  local dirname

  if [ -d "$MODULES/$module" ]; then

    echo "Loading module $module..."

    for file in `metadot_find $module`; do
      echo "Processing $file..."

      # Get the dirname, replacing string.dot with .string
      dirname="`echo $file | sed -e 's|\([^/]*\).dot/|.\1/|g'`"
      dirname="`dirname $dirname`"

      if echo $file | grep -q '.dot.link'; then
        destname=".`basename $file .dot.link`"
      else
        destname="`basename $file .link`"
      fi

      if [ "$dirname" != "." ]; then
        #echo "Creating $DEST/$dirname..."
        mkdir -p $DEST/$dirname
      else
        dirname=""
      fi

      metadot_backup "$dirname/$destname"

      #echo "Installing symlink $dirname/$destname..."
      ln -s $MODULES/$module/$file $DEST/$dirname/$destname

    done
  else
    echo "No such module $module"
  fi
}

# Load a module
function metadot_deps {
  local module="$1"
  local destname
  local dirname

  if [ -d "$MODULES/$module" ]; then
    echo "Resolving dependencies for $module.."

    if [ -e "/etc/debian_version" ] && [ -e "$MODULES/$module/dependencies/debian" ]; then
      deps="`grep -v '^#' $MODULES/$module/dependencies/debian | xargs`"
      LC_ALL=C DEBIAN_FRONTEND=noninteractive sudo apt-get install -y $deps
    fi

  else
    echo "No such module $module"
  fi
}

# Create a new module
function metadot_create {
  mkdir -p $MODULES/$1
  (
    cd $MODULES/$1
    git init

    echo "# $1 dotfile module"                                 > README.md
    echo ""                                                   >> README.md
    echo "This is the repository for $1 configuration."       >> README.md
    echo "More information at https://git.fluxo.info/metadot" >> README.md

    #echo "TODO"                > TODO.md
    #echo "===="               >> TODO.md
    #echo ""                   >> TODO.md
    #echo "* Nothing here? :P" >> TODO.md

    echo "# As we are handling with config files, it might be better to"  > .gitignore
    echo "# use a paranoid config by default."                           >> .gitignore
    echo "#"                                                             >> .gitignore
    echo "# Comment that while in development."                          >> .gitignore
    echo '*'                                                             >> .gitignore

    git add .
  )
  echo "Metadot skeleton module $1 created at $MODULES/$1"
}

# Update your dotfiles
function metadot_update {
  if [ -d "$DOT/.git" ]; then
    ( cd $DOT && git pull origin master && git submodule update --init --recursive )
  else
    for module in `ls $MODULES`; do
      ( cd $MODULES/$module && git pull origin master && git submodule update --init --recursive )
    done
  fi
}

# Basic usage
function metadot_usage {
  echo "usage: $BASENAME <option> [arguments]"
  exit 1
}

# List modules
function metadot_ls {
  ls -1 $MODULES
}

# Clone a module
function metadot_clone {
  shift
  if [ "$1" == "default" ]; then
    metadot_backup $DOT
    git clone --recursive $DEFAULT $DOT
    echo "Backups saved at $BACKUPS."
  elif [ "`basename $1 .git`" == "dotfiles" ]; then
    metadot_backup $DOT
    git clone --recursive $1 $DOT
    echo "Backups saved at $BACKUPS."
  else
    mkdir -p $MODULES
    git clone --recursive $1 $MODULES/`basename $1 .git`
  fi
}

# List installed modules
function metadot_installed {
  # Complete, slow version
  #find $HOME -lname '*.dotfiles*' -exec ls -la {} | \
  #grep .dotfiles/modules | sed -e 's|.*.dotfiles/||g' | cut -d '/' -f 2 | sort | uniq

  # Simple, incomplete version
  ls -ag $HOME/ | grep .dotfiles/modules | sed -e 's|.*.dotfiles/||g' | cut -d '/' -f 2 | sort | uniq
}

# Process modules
function metadot_process_modules {
  if [ -z "$1" ]; then
    echo "usage: $BASENAME $OPT [module(s)|--all]"
  fi

  if [ "$1" == "--all" ]; then
    modules="`ls $MODULES`"
  else
    modules="$*"
  fi

  for module in $modules; do
    metadot_$OPT $module
  done

  if [ "$OPT" == "load" ]; then
    echo "Backups saved at $BACKUPS."
  fi
}

# Process bundle
function metadot_process_bundle {
  local bundle="$1"
  local dependency
  local option

  if [ -z "$bundle" ]; then
    echo "usage: $BASENAME $OPT [bundle]"
  fi

  if [ ! -e "$DOT/bundles/$bundle" ]; then
    echo "$BASENAME: bundle not found: $bundle"
    exit 1
  fi

  cat $DOT/bundles/bundle | while read item; do
    option="`echo $OPT | sed -e 's|-bundle||g'`"

    if grep -q "^bundles/" $item; then
      dependency="`echo $item | sed -e 's|bundles/||g'`"
    elif grep -q "^modules/" $item; then
      dependency="`echo $item | sed -e 's|modules/||g'`"
    else
      echo "Skipping invalid item $item..."
      continue
    fi

    $DIRNAME/$BASENAME $option $dependency
  done
}

# Parsing
if [ -z "$OPT" ]; then
  metadot_usage
elif [ "$OPT" == "ls" ]; then
  metadot_ls
elif [ "$OPT" == "version" ]; then
  ( cd $DOT && git log --show-signature -n 1 )
elif [ "$OPT" == "update" ]; then
  metadot_update
elif [ "$OPT" == "backup" ]; then
  shift
  metadot_backup $1
elif [ "$OPT" == "clone" ]; then
  metadot_clone $1
elif [ "$OPT" == "create" ]; then
  shift
  metadot_create $1
elif [ "$OPT" == "load" ] || [ "$OPT" == "deps" ]; then
  shift
  metadot_process_modules $*
elif [ "$OPT" == "load-bundle" ] || [ "$OPT" == "deps-bundle" ]; then
  shift
  metadot_process_bundle $*
elif [ "$OPT" == "installed" ]; then
  metadot_installed
fi
